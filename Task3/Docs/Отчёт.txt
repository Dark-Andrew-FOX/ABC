--------Задание 3.
Вариант 228: Задание 4, Функция 17.

--------Основные характеристики программы:
Число заголовочных файлов: --
Число файлов реализации: 7
Общий размер исходных текстов: 24,0 КБ (24 576 байт)
Время выполнения:
Генерация контейнера, состоящего из 10000 элементов, занимает в среднем 0.029 секунд.
Quick sort такого контейнера занимает в среднем 0.127 секунд.



--------Сравнение с Заданием 1:
Вес исходных текстов остался практически таким же - было 24,4 КБ (24 987 байт).
Среднее время генерации контейнера стала медленнее - 0,024 разница в секунд! (было 0.005 секунд.)
Скорость быстрой сортировки такого контейнера стала значительно меньше - разница в 0,112 секунд! (было 0.015 секунд.)

--------Сравнение с Заданием 2:
Вес исходных текстов стал меньше - было 36,0 КБ (36 864 байт).
Среднее время генерации контейнера стала медленнее - 0,024 разница в секунд! (было 0.005 секунд.)
Скорость быстрой сортировки такого контейнера стала значительно меньше - разница в 0,121! (0.006 секунд.)

--------Дополнительный вывод:
В целом, работа с динамической типизацией немного приятнее (хотя и требует особого внимания при разработке).
Цена этого - увеличение времени работы программы, 
но для современных компьютеров, это не должно быть большой проблемой, по моему мнению,
т.к. на данном примере разница всего лишь в сотых частях секунды.

Сам Python - простой язык, user-friendly если так можно говорить о программисте,
хотя и требовал некой перестройки и дополнительного изучения (как и всё в нашей профессии, собственно).



--------Инструкция по работе:
Программа должна получить аргументы в виде:
<program name> <file> <путь input file> <путь output file>
или
<program name> <random> <кол-во эл-в для генерации> <путь output file>

второй аргумент - режим, "file" - означает чтение данных из файла, 
"random" - означает автоматическую генерацию данных.

Файл для ввода должен быть представлен в виде:
<Тип фигуры (1 - сфера, 2 - параллелепипед, 3 - правильный тетраэдр)>
<Плотность> <требуемые аргументы для этой фигуры через пробел>

Требуемы аргументы:
Для сферы: радиус
Для параллелепипеда: первое ребро, второе, третье
Для правильного тетраэдра: ребро

Программа сначала выводит в выходной файл полученные элементы, 
затем  выводит отсортированный список элементов по убыванию (это 2-я часть задания).